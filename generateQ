 generateQ (Matrix,List,Sequence,List) := (sigma,reticulationPairList,seq,EPListSorted) -> (
    reticulationPairs := apply(reticulationPairList,j->apply(j,l->e_l));
    (F1,F2) := iMap(seq,#EPListSorted);
    k := #reticulationPairs;
    discardedReticulation := 
        apply(2^k,j -> 
            apply(k,l -> reticulationPairs#l#(floor((j%(2^(l+1)))/(2^l)))));
    out = 0;
    edgeVars := apply(#EPListSorted, j -> e_(EPListSorted#j));
    for pair in discardedReticulation do (
	   remainingEdges = edgeVars;
	   for p in pair do remainingEdges = delete(p,remainingEdges);
	   prod := 1;
	   for e in remainingEdges do (
       endPoints := value substring(2,toString e);
       zeroEdges := apply(#pair,j -> pair#j => 0)|{e => 0};
       sigmaV := sub(sigma_(endPoints_0-1,0),zeroEdges);
       sigmaW := sub(sigma_(endPoints_1-1,0),zeroEdges);
       if (sigmaV == 0 or sigmaW == 0) 
        then (prod = prod*a_endPoints;)
       else(
        oneEdges := apply(#remainingEdges,j -> remainingEdges#j => 1);
        factorV := sub(sigmaV,oneEdges);
        factorW := sub(sigmaW,oneEdges);
        element1 := F1 (factorV);
        element2 := F2 (factorV);
        if (element1 == 0_W and element2 == 0_W) 
            then (prod = prod*a_endPoints)
        else(prod = prod*b_endPoints);
		    )		
	    );
	out = out + prod;
	);
   out
)
